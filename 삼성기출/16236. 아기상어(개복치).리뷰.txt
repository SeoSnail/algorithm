19.02.18 아기상어(개복치) 리뷰

1) bfs 방향 우선순위를 고려해야됨.
상 먼저 다음 좌인데 상하좌우로 하자 에러가 발생해서

2) 상좌하우로 바꿧는데 그래도 에러발생.

2-1) 상좌우하로 바꾸니까 그나마 더 나았으나 역시 에러 발생.

3) 디버깅을 통해 좌하가 우우 보다 먼저 되는 문제 발견. 

★우선순위 bfs는 상하좌우의 순서를 통해 해결할 수 없다.★

4) priority queue 로도 해결하기 힘들듯 하다. 같은 거리의 모든 물고기 중 하나를 선택하는 방식이 적절할듯.

5) 같은 거리를 무식하게 다 모으니 메모리 오바가 났다. y,x 값으로 boundary를 정해야겠다.

5-1) 그랬는데도 메모리 초과..

6) priority_queue로 pair(y,x) 작은 순으로 정렬해서 앞에거 먼저 빼면 되겠네.
 4의 생각이 틀렸는거 같다.

6-1) priority_queue로 pair<y*1000+x, time> 으로 코딩

* 하던중 visit 실수 발견하고 이전 코드 고치니까 바로 패스..
 visit을 현재함수에서만 호출함.
 visit[next] 실패했을 때도 visit=true로 고침

7) 일감이 맞음 내 소스로는 priority_queue로 해결 못함 어차피 다 보긴 봐야됨. 좌하 >> 우우 문제는 p q로 해결할 수 없음.


실수
1) 상하좌우 조절로 해결할 수 있는 줄 알았다. 
 - "좌하 >> 우우" 문제를 해결할 수 없었음

2) 그 문제를 p q로 해결하려고 햇다.

3) visit을 해당 함수에서 호출했다.
 - visit을 next로 진입하기 전에 호출해야 한다.

4) 메모리 초과가 모든 경우의 수 수집 때문인 줄 알았다
 - 시간복잡도 계산 안 하고 막함.

5) 중간에 방향이 바꼈는데 다시 종이로 안 하고 코딩부터 무식하게 했다.